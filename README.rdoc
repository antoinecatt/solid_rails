Explain what you accomplished in this lesson
-Step by step process of creating a new rails app
-what gems are and how each one works
-learned to how to generate new rails app using postgres

Explain what the following gems do:
better_errors- replaces the standard Rails error page with a much better and more useful error page.

quiet_assets- turns off the Rails asset pipeline log. This means that it suppresses messages in your development log.

meta_request- supporting gem for rails panel, a google chrome extension.

awesome_print- a Ruby library that pretty prints Ruby objects in full color exposing their internal structure with proper indentation.
pry_rails- a small gem which causes rails console to open pry

binding_of_caller-  we can grab bindings from higher up the call stack and evaluate code in that context. Allows access to 
bindings arbitrarily far up the call stack, not limited to just the immediate caller.

pry-byebug- Fast execution control in Pry

What does bundle install actaully do? - installs all the gems you have included in your rails app. Must run everytime you add/delete a gem in your Gemfile.

Why do we use Postgres instead of sqlite3? postgres is based on the object relational DBMS 


Explain what you accomplished in this lesson
Deleted unneccessary generated files for this app.
Changing generated routes into our own.

What is Capybara?
Capybara helps you test web applications by simulating how a real user would interact with your app.

What is the spec_helper?
The spec_helper.rb file rspec-rails generates is convenient, as it sets up everything you need to get your tests running. In your actual test, all you have to do is require "spec_helper" and off you go. After waiting for a while.

Explain what you accomplished in this lesson
using link_to and path helpers.
applying bootstrap.
learned about sass and using variables in bootstrap.

What is bootstrap?
bootstrap is a frontend framework that contains html and css preloaded to beautify your website

What is responsive design?
a web design approach aimed at crafting sites to provide an optimal viewing experience—easy reading and navigation with a minimum of resizing, panning, and scrolling—across a wide range of devices

Explain what you accomplished?
Understand what scaffolding is and what are the files it generated:

      invoke  active_record- Created a table
      create    db/migrate/20140528055411_create_things.rb-the migration file.
      create    app/models/thing.rb- generated a model called Thing
      invoke    rspec- since we have rspec installed, it all generated some rspec tests.
      create      spec/models/thing_spec.rb
      invoke  resource_route- generated RESTful routes
       route    resources :things
      invoke  scaffold_controller- generated a controller called things with the actions preloaded in it.
      create    app/controllers/things_controller.rb
      invoke    erb- generated views file for some of the action inside the controller.
      create      app/views/things
      create      app/views/things/index.html.erb
      create      app/views/things/edit.html.erb
      create      app/views/things/show.html.erb
      create      app/views/things/new.html.erb
      create      app/views/things/_form.html.erb
      invoke    rspec- rspec tests for actions to check if they are working.
      create      spec/controllers/things_controller_spec.rb- checks to see if actions are woking perfectly
      create      spec/views/things/edit.html.erb_spec.rb-checks if it renders edit thing form
      create      spec/views/things/index.html.erb_spec.rb- checks if it renders a list of things
      create      spec/views/things/new.html.erb_spec.rb- checks if it renders new thing form
      create      spec/views/things/show.html.erb_spec.rb- renders attributes in <p>
      create      spec/routing/things_routing_spec.rb-checks to see if routes are woking perfectly
      invoke      rspec- test to check if site responds 200:ok
      create        spec/requests/things_spec.rb
      invoke    helper- generated a helper
      create      app/helpers/things_helper.rb
      invoke      rspec- helper spec file
      create        spec/helpers/things_helper_spec.rb
      invoke    jbuilder- creates JSON structures via a Builder-style DSL.
      create      app/views/things/index.json.jbuilder
      create      app/views/things/show.json.jbuilder
      invoke  assets- includes javascript,images and stylesheets.
      invoke    coffee- coffeescript
      create      app/assets/javascripts/things.js.coffee
      invoke    scss

      Never use scaffolding when creating a project because it generates files that we might not want in there
      and it will create all kinds of mess when trying to develop the app.

Explain what you did this lesson
added validations

Why do we use validations?

Learned how to use and make tests for factorygirl

Name at least 3 types of default Rails(non-custom) validations
presence, uniqueness, length

What are some things that you might want to write a custom validation for?

When are your models actually validated?

Explain the difference between client-side and server-side validations.

How do rails validation errors work? If there's an error saving a model, how do you access that error and display it?

Explain what you did
Explain what is the difference between .find_or_create_by and find_or_initialize_by
.find_or_create_by - checks whether a record with the attributes exist. if it doesnt
then create is called.
find_or_initialize_by - works just like find_or_create_by but it will call new instead of create.
this means that a new model instance will be created in memory but wont be saved to the database.

What does the forgery gem do?
The forgery gem helps us create fake data to avoid hard coding seed files.

What other gems are out there to help create seed data?
seedbank, seed_dump

How do you select a random element from an array?
.sample method 

Explain what you did
Added a root route to the hello world page
added devise and created a User model
installed devise views
added an authentication check to all actions on the Things controller
fixed rspec tests: added tests in things_spec.rb, added users.rb with fake email and password.
Explain each of these devise behaviours:
Confirmable
Recoverable
Registerable
Rememberable
Trackable
Timeoutable
Validatable
Lockable
What did you have to do to update your rspec tests after adding authentication for the things
What are the routes that were added and what do they do?